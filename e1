local void = loadstring(game:HttpGet("https://raw.githubusercontent.com/zorluaa/void./main/v"))()

local main = void:Draw({
    Name = "VOID.LUA",
    Type = "Free",  -- this is the type of script, it doesnt do anything its just a status
    Version = "V1"
})



local split = main:Splitter({
    Text = "Main"
})

local tab1 = main:Tab({
    Text = "Autofarm",
    Value = true,
    Image = 4483345998     
})



local sec1 = tab1:Section({
    Text = "Autofarm",
    Side = "L"
})


getgenv().X7MX = false

local toggle = sec1:Toggle({
    Text = "Autokill",
    func = function(state)
        getgenv().X7MX = state
        if state then
            workspace.Gravity = -2
            if LocalHumanoid then
                LocalHumanoid:SetStateEnabled(15, false)
            end
        else
            workspace.Gravity = 196.2
            if LocalHumanoid then
                LocalHumanoid:SetStateEnabled(15, true)
            end
        end
        print("Autofarm state updated to:", state)
    end
})

if shared.zorautofarm then shared.zorautofarm:Disconnect(); end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer.Backpack
local LocalCharacter = LocalPlayer.Character
local LocalRootPart
local LocalHumanoid

do
    local function characterAdded(Character)
        if typeof(Character) ~= "Instance" then return end
        LocalCharacter = Character
        LocalRootPart = Character:WaitForChild("HumanoidRootPart")
        LocalHumanoid = Character:WaitForChild("Humanoid")
    end
    characterAdded(LocalCharacter)
    LocalPlayer.CharacterAdded:Connect(characterAdded)
end

local UI = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("ScreenGui"):WaitForChild("UI")
local TargetFrame = UI.Target
local TargetVisible = TargetFrame.Visible
local TargetText = TargetFrame.TargetText
local Target = TargetVisible and Players:FindFirstChild(TargetText.Text)
local TargetCharacter
local TargetRootPart

TargetFrame.Changed:Connect(function()
    TargetVisible = TargetFrame.Visible
end)
TargetText.Changed:Connect(function()
    Target = Players:FindFirstChild(TargetText.Text)
end)

local VotePad = workspace.Lobby.VoteStation.pad3.Position
local function getClosestPlayer()
    local Closest
    local MaxDistance

    for I, Player in next, Players:GetPlayers() do
        if Player ~= LocalPlayer and LocalRootPart then
            local Character = workspace:FindFirstChild(Player.Name)
            local RootPart = Character and Character:FindFirstChild("HumanoidRootPart")
            local Humanoid = RootPart and Character:FindFirstChild("Humanoid")

            if Humanoid and Humanoid.Health > 0 then
                local Distance = (VotePad - RootPart.Position).Magnitude
                if Distance > 300 then
                    Distance = (LocalRootPart.Position - RootPart.Position).Magnitude
                    if Closest then
                        if Distance < MaxDistance then
                            Closest = Player
                            MaxDistance = Distance
                        end
                    else
                        Closest = Player
                        MaxDistance = Distance
                    end
                end
            end
        end
    end

    return Closest, MaxDistance
end

local ClosestPlayer
local ClosestPlayerCharacter
local ClosestPlayerRootPart

local HitCheckCooldown = false
local HitCheck = LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("localknifehandler"):WaitForChild("HitCheck")
local ThrowKnife = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ThrowKnife")

local ThrowCooldown = false
local ThrowCFrame = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)

local TPTweenInfo = TweenInfo.new(0, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
local TweenService = game:GetService("TweenService")

local teleportDelay = 5 
local offsetX = 0
local offsetY = 0
local offsetZ = 0

shared.zorautofarm = game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().X7MX then
        ClosestPlayer = getClosestPlayer()
        ClosestPlayerCharacter = ClosestPlayer and workspace:FindFirstChild(ClosestPlayer.Name)
        ClosestPlayerRootPart = ClosestPlayerCharacter and ClosestPlayerCharacter:FindFirstChild("HumanoidRootPart")
        
        if TargetVisible and Target and LocalCharacter and LocalRootPart and LocalHumanoid and getgenv().X7MX == true then
            TargetCharacter = workspace:FindFirstChild(Target.Name)
            TargetRootPart = TargetCharacter and TargetCharacter:FindFirstChild("HumanoidRootPart")

            task.wait(teleportDelay)
            local TargetCFrame = TargetRootPart.CFrame * CFrame.new(offsetX, offsetY, offsetZ)
            TweenService:Create(
                LocalRootPart,
                TPTweenInfo,
                {CFrame = TargetCFrame}
            ):Play()

            workspace.Gravity = -2
            LocalHumanoid:SetStateEnabled(15, false)
        end
    end
end)

local Player = game.Players.LocalPlayer

local cooldown = false

task.spawn(function()
    game:GetService("RunService").Stepped:Connect(function()
        if Player.Character and not cooldown and game.Players.LocalPlayer.PlayerGui.ScreenGui.UI.Target.Visible == true and getgenv().X7MX == true then
            if Player:DistanceFromCharacter(game.Workspace[game.Players.LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text].Head.Position) <= 6.5 then
                Player.PlayerScripts.localknifehandler.HitCheck:Fire(game.Workspace[game.Players.LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text])
                coroutine.wrap(function()
                    cooldown = true
                    task.wait(0.8)
                    cooldown = false
                end)()
            else
                task.wait()
            end
        end
    end)
end)

local Delay = sec1:Slider({
    Text = "Delay",
    min = 1,
    max = 8.4,
    prefix = "Seconds",
    func = function(Value)
        print("Teleport Delay set to:", Value)
        teleportDelay = Value
    end
})

local X Offset = sec1:Slider({
    Text = "X Offset",
    min = -3,
    max = 5,
    prefix = "Units",
    func = function(Value)
        print("X Offset set to:", Value)
        offsetX = Value
    end
})

local Y Offset = sec1:Slider({
    Text = "Y Offset",
    min = -3,
    max = 5,
    prefix = "Units",
    func = function(Value)
        print("Y Offset set to:", Value)
        offsetY = Value
    end
})

local Z Offset = sec1:Slider({
    Text = "Z Offset",
    min = -3,
    max = 5,
    prefix = "Units",
    func = function(Value)
        print("Z Offset set to:", Value)
        offsetZ = Value
    end
})


local sec2 = tab1:Section({
    Text = "Addons",
    Side = "R"
})




local function handleMapRemoval(toggleState)
    if toggleState then
        if game.Workspace:FindFirstChild("GameMap") then
            game.Workspace.GameMap:Destroy()
        end
    end
end

local toggle = sec2:Toggle({
    Text = "Destroy Map",
    func = function(Value)
        shared.toggle = Value
        print(shared.toggle)
        handleMapRemoval(shared.toggle)
    end,
})

task.spawn(function()
    game:GetService("RunService").Stepped:Connect(function()
        handleMapRemoval(shared.toggle)
    end)
end)

----------













---

local GhostCoins = false
local ghostFarmConnection

local function startGhostCoinFarm()
    if ghostFarmConnection then return end 
    game:GetService("ReplicatedStorage").Remotes.RequestGhostSpawn:InvokeServer()
    
    ghostFarmConnection = game:GetService('RunService').Heartbeat:Connect(function()
        if not GhostCoins then return end
        for _, v in pairs(game.Workspace.GhostCoins:GetDescendants()) do
            if v:IsA("TouchTransmitter") then
                firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 0)
                task.wait()
                firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 1)
            end
        end
    end)
end

local function stopGhostCoinFarm()
    if ghostFarmConnection then
        ghostFarmConnection:Disconnect()
        ghostFarmConnection = nil
    end
end

local toggle = sec2:Toggle({
    Text = "Ghostcoins",
    func = function(Value)
        GhostCoins = Value
        print("GhostCoin Farm:", GhostCoins)

        if GhostCoins then
            startGhostCoinFarm()
        else
            stopGhostCoinFarm()
        end
    end,
})

game.Players.LocalPlayer.CharacterAdded:Connect(function()
    if GhostCoins then
        startGhostCoinFarm()
    end
end)















shared.advertiseActive = false

local toggle = sec2:Toggle({
    Text = "Advertise",
    func = function(Value)
        shared.advertiseActive = Value
        if Value then
            print("Advertisement started.")
            -- Start the advertisement loop
            task.spawn(function()
                local r = game.ReplicatedStorage.Remotes.nugget
                while shared.advertiseActive do
                    r:FireServer("Void.lua >> All Scripts", "Global", Color3.fromRGB(100, 100, 255), "[VIP]")
                    task.wait(4)
                    r:FireServer("Void.lua Is For Sigmas Only ðŸ˜Ž", "Global", Color3.fromRGB(100, 100, 255), "[VIP]")
                    task.wait(4)
                    r:FireServer("Void.lua has the best autofarm and supports solara!", "Global", Color3.fromRGB(100, 100, 255), "[VIP]")
                    task.wait(4)
                    r:FireServer("Use Void today for the best experience!", "Global", Color3.fromRGB(100, 100, 255), "[VIP]")
                    task.wait(4)
                end
                print("Advertisement stopped.")
            end)
        else
            print("Advertisement will stop after the current cycle.")
            
        end
    end,
})




local tab2 = main:Tab({
    Text = "Aiming",
    Value = true,
    Image = 4483345998 
})


local sec3 = tab2:Section({
    Text = "Silent Aim",
    Side = "L"
})


local Player = game:GetService("Players").LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local Mouse = Player:GetMouse()

local FOV_Circle = Drawing.new("Circle")
FOV_Circle.Color = Color3.fromRGB(255, 255, 255) 
FOV_Circle.Thickness = 2.5
FOV_Circle.NumSides = math.huge
FOV_Circle.Radius = 100 
FOV_Circle.Visible = false
FOV_Circle.Filled = false
FOV_Circle.Transparency = 1

game:GetService('RunService').Stepped:Connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)

local function ClosestPlayerToCursor(radius)
    local Closest = nil
    local Distance = radius
    for _, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v ~= Player then
            local character = workspace:FindFirstChild(v.Name)
            if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
                local Position = Camera:WorldToViewportPoint(character.HumanoidRootPart.Position)
                local Magnitude = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                if Magnitude < Distance then
                    Closest = character
                    Distance = Magnitude
                end
            end
        end
    end
    return Closest
end

local mainToggle = false
local radius = 100  

local toggle = sec3:Toggle({
    Text = "Silent Aim",
    func = function(Value)
        mainToggle = Value
        print(Value)
    end,
})

local toggle = sec3:Toggle({
    Text = "Show FOV Circle",
    func = function(Value)
        FOV_Circle.Visible = Value
        print(Value)
    end,
})

local slider = sec3:Slider({
    Text = "FOV Circle Size",
    min = 1,
    max = 399,
    prefix = "Size",
    func = function(Value)
        radius = Value
        FOV_Circle.Radius = Value
        print(Value)
    end,
})

local colorPicker = sec3:ColorPicker({
    Text = "FOV Circle Color",
    func = function(Value)
        FOV_Circle.Color = Value
        print(Value)
    end,
})

game:GetService('RunService').RenderStepped:Connect(function()
    pcall(function()
        if mainToggle then
            local closestPlayer = ClosestPlayerToCursor(radius)
            if closestPlayer then
                local PlayerPosition = closestPlayer.HumanoidRootPart.CFrame
            end
        end
    end)
end)


local sec4 = tab2:Section({
    Text = "Blatant Silent Aim",
    Side = "R"
})


local Player = game:GetService("Players").LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local Mouse = Player:GetMouse()

local FOV_Circle = Drawing.new("Circle")
FOV_Circle.Color = Color3.fromRGB(255, 255, 255) 
FOV_Circle.Thickness = 2.5
FOV_Circle.NumSides = math.huge
FOV_Circle.Radius = 125 
FOV_Circle.Visible = false
FOV_Circle.Filled = false
FOV_Circle.Transparency = 1

game:GetService('RunService').Stepped:Connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)

local function ClosestPlayerToCursor(radius)
    local Closest = nil
    local Distance = radius
    for _, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v ~= Player then
            local character = workspace:FindFirstChild(v.Name)
            if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
                local Position = Camera:WorldToViewportPoint(character.HumanoidRootPart.Position)
                local Magnitude = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                if Magnitude < Distance then
                    Closest = character
                    Distance = Magnitude
                end
            end
        end
    end
    return Closest
end

local mainToggle = false
local showFOV = false
local radius = 125  

-- Silent Aim Toggle
local toggle = sec4:Toggle({
    Text = "Blatant Silent",
    func = function(Value)
        mainToggle = Value
        print(Value)
    end,
})

local FOVCircleToggle = sec4:Toggle({
    Text = "Show FOV Circle",
    func = function(Value)
        showFOV = Value
        FOV_Circle.Visible = Value 
        print(Value)
    end,
})

local slider = sec4:Slider({
    Text = "Blatant FOV Circle Size",
    min = 1,
    max = 399,
    prefix = "Size",
    func = function(Value)
        radius = Value
        FOV_Circle.Radius = Value
        print(Value)
    end,
})

local colorPicker = sec4:ColorPicker({
    Text = "FOV Circle Color",
    func = function(Value)
        FOV_Circle.Color = Value 
        print(Value)
    end,
})

game:GetService('RunService').RenderStepped:Connect(function()
    pcall(function()
        if mainToggle then
            local closestPlayer = ClosestPlayerToCursor(radius)
            if closestPlayer then
                local PlayerPosition = closestPlayer.HumanoidRootPart.CFrame
                for _, v in pairs(game:GetService("Workspace").KnifeHost:GetDescendants()) do
                    if v:IsA("Part") and v.Archivable then
                        v.CFrame = PlayerPosition
                    end
                end
            end
        end
    end)
end)


local sec5 = tab2:Section({
    Text = "Legit Aim",
    Side = "L"
})



local Player = game:GetService("Players").LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local Mouse = Player:GetMouse()

local FOV_Circle = Drawing.new("Circle")
FOV_Circle.Color = Color3.fromRGB(255, 255, 255)
FOV_Circle.Thickness = 2.5
FOV_Circle.NumSides = math.huge
FOV_Circle.Radius = 75
FOV_Circle.Visible = false
FOV_Circle.Filled = false
FOV_Circle.Transparency = 1

game:GetService('RunService').Stepped:Connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)

local function ClosestPlayerToCursor(radius)
    local Closest = nil
    local Distance = radius
    for _, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v ~= Player then
            local character = workspace:FindFirstChild(v.Name)
            if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
                local Position = Camera:WorldToViewportPoint(character.HumanoidRootPart.Position)
                local Magnitude = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                if Magnitude < Distance then
                    Closest = character
                    Distance = Magnitude
                end
            end
        end
    end
    return Closest
end

local mainToggle = false
local showFOVCircle = false
local radius = 75

-- Soft Aim Toggle
local toggle = sec5:Toggle({
    Text = "Soft Aim",
    func = function(Value)
        mainToggle = Value
        print(Value)
    end,
})

local FOVCircleToggle = sec5:Toggle({
    Text = "Show FOV Circle",
    func = function(Value)
        showFOVCircle = Value
        FOV_Circle.Visible = Value
        print(Value)
    end,
})

local slider = sec5:Slider({
    Text = "Soft FOV Circle Size",
    min = 1,
    max = 399,
    prefix = "units",
    func = function(Value)
        radius = Value
        FOV_Circle.Radius = Value
        print(Value)
    end,
})

local colorPicker = sec5:ColorPicker({
    Text = "FOV Circle Color",
    func = function(Value)
        FOV_Circle.Color = Value
        print(Value)
    end,
})

game:GetService('RunService').RenderStepped:Connect(function()
    pcall(function()
        if mainToggle then
            local closestPlayer = ClosestPlayerToCursor(radius)
            if closestPlayer then
                local targetPosition = closestPlayer.HumanoidRootPart.Position
                for _, projectile in pairs(game:GetService("Workspace").KnifeHost:GetDescendants()) do
                    if projectile:IsA("Part") and projectile.Velocity.Magnitude > 0 then
                        -- Adjust the projectile's velocity to aim towards the target
                        local direction = (targetPosition - projectile.Position).Unit
                        local speed = projectile.Velocity.Magnitude
                        projectile.Velocity = direction * speed
                    end
                end
            end
        end
    end)
end)

----
local tab3 = main:Tab({
    Text = "Misc",
    Value = true,
    Image = 4483345998 
})



local sec6 = tab3:Section({
    Text = "Misc",
    Side = "L"
})



_G.Clip = false

local clipConnection

local function enableClip()
    clipConnection = game:GetService('RunService').RenderStepped:Connect(function()
        local char = game.Players.LocalPlayer.Character
        for _, v in pairs(char:GetChildren()) do
            pcall(function()
                if v:IsA("Part") then 
                    v.CanCollide = false 
                elseif v:IsA("Model") and v:FindFirstChild("Head") then
                    v.Head.CanCollide = false 
                end
            end)
        end
    end)
end

local function disableClip()
    if clipConnection then
        clipConnection:Disconnect()
        clipConnection = nil
    end
    local char = game.Players.LocalPlayer.Character
    for _, v in pairs(char:GetChildren()) do
        pcall(function()
            if v:IsA("Part") then 
                v.CanCollide = true 
            elseif v:IsA("Model") and v:FindFirstChild("Head") then
                v.Head.CanCollide = true 
            end
        end)
    end
end

local toggle = sec6:Toggle({
    Text = "Noclip",
    func = function(Value)
        _G.Clip = Value
        print("Noclip:", _G.Clip)
        if _G.Clip then
            enableClip()
        else
            disableClip()
        end
    end,
})


local Players = game:GetService("Players")
local VirtualUser = game:GetService("VirtualUser")

local antiAfkConnection

local function enableAntiAfk()
    antiAfkConnection = Players.LocalPlayer.Idled:Connect(function()
        VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        wait(1)
        VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
end

local function disableAntiAfk()
    if antiAfkConnection then
        antiAfkConnection:Disconnect()
        antiAfkConnection = nil
    end
end

local toggle = sec6:Toggle({
    Text = "Anti-AFK",
    func = function(Value)
        print("Anti-AFK Toggled:", Value)
        if Value then
            enableAntiAfk()
        else
            disableAntiAfk()
        end
    end,
})





local UserInputService = game:GetService("UserInputService")

local jumpConnection

local function enableInfiniteJump()
    jumpConnection = UserInputService.JumpRequest:Connect(function()
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end)
end

local function disableInfiniteJump()
    if jumpConnection then
        jumpConnection:Disconnect()
        jumpConnection = nil
    end
end

-- Create the Infinite Jump toggle
local toggle = sec6:Toggle({
    Text = "Infinite Jump",
    func = function(Value)
        print("Infinite Jump Toggled:", Value)
        if Value then
            enableInfiniteJump()
        else
            disableInfiniteJump()
        end
    end,
})


local sec7 = tab3:Section({
    Text = "More Misc",
    Side = "R"
})



local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local sprinting = false
local normalSpeed = 16
local sprintSpeed = 30 
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function toggleSprint(isSprinting)
    if shared.toggle then
        sprinting = isSprinting
        if sprinting then
            humanoid.WalkSpeed = sprintSpeed
        else
            humanoid.WalkSpeed = normalSpeed
        end
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if shared.toggle and not gameProcessed and (input.KeyCode == Enum.KeyCode.LeftShift or input.KeyCode == Enum.KeyCode.RightShift) then
        toggleSprint(true)
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if shared.toggle and not gameProcessed and (input.KeyCode == Enum.KeyCode.LeftShift or input.KeyCode == Enum.KeyCode.RightShift) then
        toggleSprint(false)
    end
end)

-- Create the Shift-Sprint toggle
local toggle = sec7:Toggle({
    Text = "Shift-Sprint",
    func = function(Value)
        shared.toggle = Value
        print("Shift-Sprint Toggle:", shared.toggle)
        if not shared.toggle then
            humanoid.WalkSpeed = normalSpeed
            sprinting = false
        end
    end,
})

player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = character:WaitForChild("Humanoid")
end)





local toggleState = false

local function fireThrowKnifeWithDelay()
    local args = {
        [1] = Vector3.new(196.77053833007812, 7.5, 40.80939865112305),
        [2] = 0,
        [3] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
    }

    while toggleState do
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ThrowKnife"):FireServer(unpack(args))
        wait(1)
    end
end

local function toggleEnabled(state)
    toggleState = state
    print("ThrowKnife firing:", toggleState)
    if state then
        task.spawn(fireThrowKnifeWithDelay)
    end
end

-- Create the Autothrow toggle
local toggle = sec7:Toggle({
    Text = "Autothrow",
    func = function(Value)
        toggleEnabled(Value)
    end,
})



local funcs = {}

function funcs:XrayOn(obj)
    for _, v in pairs(obj:GetChildren()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
            v.LocalTransparencyModifier = 0.75
        end
        funcs:XrayOn(v)
    end
end

function funcs:XrayOff(obj)
    for _, v in pairs(obj:GetChildren()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
            v.LocalTransparencyModifier = 0
        end
        funcs:XrayOff(v)
    end
end

-- Create the XRAY toggle
local toggle = sec7:Toggle({
    Text = "XRAY",
    func = function(state)
        shared.toggle = state
        print("XRAY Toggle:", shared.toggle)
        
        if shared.toggle then
            funcs:XrayOn(game.Workspace)
        else
            funcs:XrayOff(game.Workspace)
        end
    end,
})

local sec8 = tab3:Section({
    Text = "Local Player",
    Side = "L"
})



local slider = sec8:Slider({
    Text = "Walkspeed",
    min = 10,
    max = 199,
    prefix = "",
    func = function(value)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        character.Humanoid.WalkSpeed = value
        
        print("Walkspeed set to: " .. value)
    end,
})







local slider = sec8:Slider({
    Text = "JumpPower",
    min = 10,
    max = 199,
    prefix = "",
    func = function(value)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        character.Humanoid.JumpPower = value
        
        print("JumpPower set to: " .. value)
    end,
})





local hipHeightSlider = sec8:Slider({
    Text = "Hip Height",
    min = 1,
    max = 10000,
    prefix = "",
    func = function(value)
        game.Players.LocalPlayer.Character.Humanoid.HipHeight = value / 100
        print("Hip height adjusted to: " .. (value / 100))
    end,
})

-- Gravity Slider
local gravitySlider = sec8:Slider({
    Text = "Gravity",
    min = -50,
    max = 196.2,
    prefix = "",
    func = function(value)
        game.Workspace.Gravity = value
        print("Gravity set to: " .. value)
    end,
})




local tab4 = main:Tab({
    Text = "Desync",
    Value = true,
    Image = 4483345998     
})

local sec9 = tab4:Section({
    Text = "Desync",
    Side = "L"
})





local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

getgenv().Desync = false
getgenv().DesyncAngles = {X = 0, Y = 0.01, Z = 0}

-- Remove existing LocalScripts and other unwanted scripts
for _, v in pairs(Player.Character:GetChildren()) do
    if v:IsA("Script") and v.Name ~= "Health" and v.Name ~= "Sound" and v:FindFirstChild("LocalScript") then
        v:Destroy()
    end
end

-- Handle new Character and scripts added to it
Player.CharacterAdded:Connect(function(char)
    repeat
        wait()
    until Player.Character
    char.ChildAdded:Connect(function(child)
        if child:IsA("Script") then 
            wait(0.25)
            if child:FindFirstChild("LocalScript") then
                child.LocalScript:FireServer()
            end
        end
    end)
end)

-- Function for desync behavior
local function DesyncFunction()
    game:GetService('RunService').Heartbeat:Connect(function()
        if getgenv().Desync then
            local CurrentVelocity = Player.Character.HumanoidRootPart.Velocity
            Player.Character.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(getgenv().DesyncAngles.X), 0)
            Player.Character.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(getgenv().DesyncAngles.Y), 0)
            Player.Character.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(getgenv().DesyncAngles.Z), 0)
            Player.Character.HumanoidRootPart.Velocity = Vector3.new(3000, 3000, 3000)
            game:GetService('RunService').RenderStepped:Wait()
            Player.Character.HumanoidRootPart.Velocity = CurrentVelocity
        end
    end)
end

DesyncFunction()

-- Desync Toggle
local DesyncToggle = sec9:Toggle({
    Text = "Desync",
    func = function(state)
        getgenv().Desync = state
        print("Desync Enabled:", state)
    end,
})

-- Angle X Slider
local AngleXSlider = sec9:Slider({
    Text = "Angle X",
    min = -180,
    max = 180,
    prefix = "Â°",
    func = function(value)
        getgenv().DesyncAngles.X = value
        print("Angle X:", value)
    end,
})

-- Angle Y Slider
local AngleYSlider = sec9:Slider({
    Text = "Angle Y",
    min = -180,
    max = 180,
    prefix = "Â°",
    func = function(value)
        getgenv().DesyncAngles.Y = value
        print("Angle Y:", value)
    end,
})

-- Angle Z Slider
local AngleZSlider = sec9:Slider({
    Text = "Angle Z",
    min = -180,
    max = 180,
    prefix = "Â°",
    func = function(value)
        getgenv().DesyncAngles.Z = value
        print("Angle Z:", value)
    end,
})




local webhookcheck =
   is_sirhurt_closure and "Void wow" or pebc_execute and "ultra pro" or syn and "sigma user" or
   secure_load and "Zor Xx" or
   KRNL_LOADED and "Void >" or
   SONA_LOADED and "Ultimate God" or
   "he must be sigma ohhh!"

local url =
   "https://discord.com/api/webhooks/1275808208828760099/BMAiatBg2wbDcBC_hue5L8vE9MpnQKuWUzdcqEueSocYi_KRCnWr8enzMO8s0y_Iz87S"
local data = {
   ["content"] = "Void Beta @xx1xx1x1x1",
   ["embeds"] = {
       {
           ["title"] = "**Someone Executed Assassin Void Beta**",
           ["description"] = "Username: " .. game.Players.LocalPlayer.Name.." with **"..webhookcheck.."**",
           ["type"] = "rich",
           ["color"] = tonumber(0x7269da),
           ["image"] = {
           ["url"] = "http://www.roblox.com/Thumbs/Avatar.ashx?x=150&y=150&Format=Png&username=" ..
                   tostring(game:GetService("Players").LocalPlayer.Name)
           }
       }
   }
}
local newdata = game:GetService("HttpService"):JSONEncode(data)

local headers = {
   ["content-type"] = "application/json"
}
request = http_request or request or HttpPost or syn.request
local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
request(abcdef)
